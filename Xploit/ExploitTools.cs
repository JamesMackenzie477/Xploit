using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace Xploit
{
    /// <summary>
    /// An enum of different access flags for a process handle.
    /// </summary>
    public enum ProcessAccessFlags
    {
        /// <summary>
        /// Full control over the target process.
        /// </summary>
        FullControl = 0x1FFFFF
    }

    /// <summary>
    /// A class wrapper for the exploit tools library.
    /// </summary>
    static class ExploitTools
    {
        /// <summary>
        /// Obtains a handle to the target process via a kernel driver.
        /// </summary>
        /// <param name="processId">The id of the target process.</param>
        /// <param name="desiredAccess">The desired access rights of the handle.</param>
        /// <returns>A handle to the target process.</returns>
        [DllImport("ExploitTools.dll")]
        public static extern IntPtr GetProcessHandle(int processId, ProcessAccessFlags desiredAccess = ProcessAccessFlags.FullControl);

        [DllImport("ExploitTools.dll")]
        public static extern int FindProcess(string imageName);

        [DllImport("ExploitTools.dll")]
        public static extern bool SetDebugPrivilege(IntPtr hProcess, bool Enable = true);
    }

    /// <summary>
    /// A class wrapper for a few needed Windows API functions.
    /// </summary>
    static class WinApi
    {
        [DllImport("Kernel32.dll")]
        public static extern IntPtr GetCurrentProcess();
    }
}
